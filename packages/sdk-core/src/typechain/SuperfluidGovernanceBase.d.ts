/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SuperfluidGovernanceBaseInterface extends ethers.utils.Interface {
  functions: {
    "replaceGovernance(address,address)": FunctionFragment;
    "registerAgreementClass(address,address)": FunctionFragment;
    "updateContracts(address,address,address[],address)": FunctionFragment;
    "updateSuperTokenLogic(address,address)": FunctionFragment;
    "getConfigAsAddress(address,address,bytes32)": FunctionFragment;
    "getConfigAsUint256(address,address,bytes32)": FunctionFragment;
    "getRewardAddress(address,address)": FunctionFragment;
    "setRewardAddress(address,address,address)": FunctionFragment;
    "clearRewardAddress(address,address)": FunctionFragment;
    "getCFAv1LiquidationPeriod(address,address)": FunctionFragment;
    "setCFAv1LiquidationPeriod(address,address,uint256)": FunctionFragment;
    "clearCFAv1LiquidationPeriod(address,address)": FunctionFragment;
    "isTrustedForwarder(address,address,address)": FunctionFragment;
    "enableTrustedForwarder(address,address,address)": FunctionFragment;
    "disableTrustedForwarder(address,address,address)": FunctionFragment;
    "clearTrustedForwarder(address,address,address)": FunctionFragment;
    "whiteListNewApp(address,bytes32)": FunctionFragment;
    "isAuthorizedAppFactory(address,address)": FunctionFragment;
    "authorizeAppFactory(address,address)": FunctionFragment;
    "unauthorizeAppFactory(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "replaceGovernance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAgreementClass",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContracts",
    values: [string, string, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSuperTokenLogic",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigAsAddress",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfigAsUint256",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardAddress",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearRewardAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCFAv1LiquidationPeriod",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCFAv1LiquidationPeriod",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clearCFAv1LiquidationPeriod",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableTrustedForwarder",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableTrustedForwarder",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearTrustedForwarder",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListNewApp",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedAppFactory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeAppFactory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unauthorizeAppFactory",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "replaceGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAgreementClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSuperTokenLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigAsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfigAsUint256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearRewardAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCFAv1LiquidationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCFAv1LiquidationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearCFAv1LiquidationPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteListNewApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedAppFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeAppFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unauthorizeAppFactory",
    data: BytesLike
  ): Result;

  events: {
    "CFAv1LiquidationPeriodChanged(address,address,bool,uint256)": EventFragment;
    "ConfigChanged(address,address,bytes32,bool,uint256)": EventFragment;
    "RewardAddressChanged(address,address,bool,address)": EventFragment;
    "TrustedForwarderChanged(address,address,bool,address,bool)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CFAv1LiquidationPeriodChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustedForwarderChanged"): EventFragment;
}

export type CFAv1LiquidationPeriodChangedEvent = TypedEvent<
  [string, string, boolean, BigNumber] & {
    host: string;
    superToken: string;
    isSet: boolean;
    liquidationPeriod: BigNumber;
  }
>;

export type ConfigChangedEvent = TypedEvent<
  [string, string, string, boolean, BigNumber] & {
    host: string;
    superToken: string;
    key: string;
    isSet: boolean;
    value: BigNumber;
  }
>;

export type RewardAddressChangedEvent = TypedEvent<
  [string, string, boolean, string] & {
    host: string;
    superToken: string;
    isSet: boolean;
    rewardAddress: string;
  }
>;

export type TrustedForwarderChangedEvent = TypedEvent<
  [string, string, boolean, string, boolean] & {
    host: string;
    superToken: string;
    isSet: boolean;
    forwarder: string;
    enabled: boolean;
  }
>;

export class SuperfluidGovernanceBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SuperfluidGovernanceBaseInterface;

  functions: {
    replaceGovernance(
      host: string,
      newGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAgreementClass(
      host: string,
      agreementClass: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateContracts(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateSuperTokenLogic(
      host: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConfigAsAddress(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { value: string }>;

    getConfigAsUint256(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { period: BigNumber }>;

    getRewardAddress(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setRewardAddress(
      host: string,
      superToken: string,
      rewardAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearRewardAddress(
      host: string,
      superToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    setCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    enableTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    clearTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteListNewApp(
      host: string,
      key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAuthorizedAppFactory(
      host: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    authorizeAppFactory(
      host: string,
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unauthorizeAppFactory(
      host: string,
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  replaceGovernance(
    host: string,
    newGov: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAgreementClass(
    host: string,
    agreementClass: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateContracts(
    host: string,
    hostNewLogic: string,
    agreementClassNewLogics: string[],
    superTokenFactoryNewLogic: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateSuperTokenLogic(
    host: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConfigAsAddress(
    host: string,
    superToken: string,
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getConfigAsUint256(
    host: string,
    superToken: string,
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewardAddress(
    host: string,
    superToken: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setRewardAddress(
    host: string,
    superToken: string,
    rewardAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearRewardAddress(
    host: string,
    superToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCFAv1LiquidationPeriod(
    host: string,
    superToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setCFAv1LiquidationPeriod(
    host: string,
    superToken: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearCFAv1LiquidationPeriod(
    host: string,
    superToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    host: string,
    superToken: string,
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  enableTrustedForwarder(
    host: string,
    superToken: string,
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableTrustedForwarder(
    host: string,
    superToken: string,
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  clearTrustedForwarder(
    host: string,
    superToken: string,
    forwarder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteListNewApp(
    host: string,
    key: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAuthorizedAppFactory(
    host: string,
    factory: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  authorizeAppFactory(
    host: string,
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unauthorizeAppFactory(
    host: string,
    factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    replaceGovernance(
      host: string,
      newGov: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAgreementClass(
      host: string,
      agreementClass: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateContracts(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSuperTokenLogic(
      host: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getConfigAsAddress(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getConfigAsUint256(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAddress(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setRewardAddress(
      host: string,
      superToken: string,
      rewardAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    clearRewardAddress(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    clearCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    enableTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disableTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    clearTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteListNewApp(
      host: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isAuthorizedAppFactory(
      host: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizeAppFactory(
      host: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unauthorizeAppFactory(
      host: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CFAv1LiquidationPeriodChanged(address,address,bool,uint256)"(
      host?: string | null,
      superToken?: string | null,
      isSet?: null,
      liquidationPeriod?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber],
      {
        host: string;
        superToken: string;
        isSet: boolean;
        liquidationPeriod: BigNumber;
      }
    >;

    CFAv1LiquidationPeriodChanged(
      host?: string | null,
      superToken?: string | null,
      isSet?: null,
      liquidationPeriod?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber],
      {
        host: string;
        superToken: string;
        isSet: boolean;
        liquidationPeriod: BigNumber;
      }
    >;

    "ConfigChanged(address,address,bytes32,bool,uint256)"(
      host?: string | null,
      superToken?: string | null,
      key?: null,
      isSet?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, boolean, BigNumber],
      {
        host: string;
        superToken: string;
        key: string;
        isSet: boolean;
        value: BigNumber;
      }
    >;

    ConfigChanged(
      host?: string | null,
      superToken?: string | null,
      key?: null,
      isSet?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, boolean, BigNumber],
      {
        host: string;
        superToken: string;
        key: string;
        isSet: boolean;
        value: BigNumber;
      }
    >;

    "RewardAddressChanged(address,address,bool,address)"(
      host?: string | null,
      superToken?: string | null,
      isSet?: null,
      rewardAddress?: null
    ): TypedEventFilter<
      [string, string, boolean, string],
      {
        host: string;
        superToken: string;
        isSet: boolean;
        rewardAddress: string;
      }
    >;

    RewardAddressChanged(
      host?: string | null,
      superToken?: string | null,
      isSet?: null,
      rewardAddress?: null
    ): TypedEventFilter<
      [string, string, boolean, string],
      {
        host: string;
        superToken: string;
        isSet: boolean;
        rewardAddress: string;
      }
    >;

    "TrustedForwarderChanged(address,address,bool,address,bool)"(
      host?: string | null,
      superToken?: string | null,
      isSet?: null,
      forwarder?: null,
      enabled?: null
    ): TypedEventFilter<
      [string, string, boolean, string, boolean],
      {
        host: string;
        superToken: string;
        isSet: boolean;
        forwarder: string;
        enabled: boolean;
      }
    >;

    TrustedForwarderChanged(
      host?: string | null,
      superToken?: string | null,
      isSet?: null,
      forwarder?: null,
      enabled?: null
    ): TypedEventFilter<
      [string, string, boolean, string, boolean],
      {
        host: string;
        superToken: string;
        isSet: boolean;
        forwarder: string;
        enabled: boolean;
      }
    >;
  };

  estimateGas: {
    replaceGovernance(
      host: string,
      newGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAgreementClass(
      host: string,
      agreementClass: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateContracts(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateSuperTokenLogic(
      host: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConfigAsAddress(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfigAsUint256(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardAddress(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardAddress(
      host: string,
      superToken: string,
      rewardAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearRewardAddress(
      host: string,
      superToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enableTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    clearTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteListNewApp(
      host: string,
      key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAuthorizedAppFactory(
      host: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorizeAppFactory(
      host: string,
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unauthorizeAppFactory(
      host: string,
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    replaceGovernance(
      host: string,
      newGov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAgreementClass(
      host: string,
      agreementClass: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateContracts(
      host: string,
      hostNewLogic: string,
      agreementClassNewLogics: string[],
      superTokenFactoryNewLogic: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateSuperTokenLogic(
      host: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConfigAsAddress(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfigAsUint256(
      host: string,
      superToken: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardAddress(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardAddress(
      host: string,
      superToken: string,
      rewardAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearRewardAddress(
      host: string,
      superToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearCFAv1LiquidationPeriod(
      host: string,
      superToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    clearTrustedForwarder(
      host: string,
      superToken: string,
      forwarder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteListNewApp(
      host: string,
      key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorizedAppFactory(
      host: string,
      factory: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorizeAppFactory(
      host: string,
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unauthorizeAppFactory(
      host: string,
      factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
